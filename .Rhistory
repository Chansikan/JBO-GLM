# Plotting
KVP_labs <- c("120 kVp", "140 kVp")
names(KVP_labs) <- c("120", "140")
ggplot(df_sc_plot, aes(x = as.numeric(as.character(e_level)), y = Mean, shape = Phantom_size, color = material)) +
geom_line() +
geom_point(size=2.5) +
geom_errorbar(aes(ymin = Mean - 1.96*(SD/sqrt(9)), ymax=Mean + 1.96*(SD/sqrt(9))), width=.2) +
# add a horizonal line (for reference)
geom_hline(yintercept = 120, linetype="dotted", color="red", size=1) + # iodine
geom_hline(yintercept = 150, linetype="dotted", color="green", size=1) + # tantalum
# designing
theme_bw(base_size=16) +
scale_x_continuous(name = "Monoenergy level (keV)", breaks = seq(40, 200, 10)) +
theme(axis.text.x=element_text(angle=60, hjust=1)) +
labs(y="Mean HU") +
# legend labelling
scale_shape_discrete(name="Size",labels=c("Slim","Large", "Extra large")) +
scale_color_discrete(name="Material",labels=c("Iodine 6 mg/ml","Tantalum 6 mg/ml", "Water")) +
# facet labelling
facet_grid(cols=vars(KVP), labeller = labeller(KVP = KVP_labs)) +
theme(strip.background = element_rect(color="black", fill="white", size=1, linetype="solid"))
.libPaths()
library(caret)
caret::train()
?caret::train()
detach("package:caret", unload=TRUE)
caret::bag(
)
caret::bag()
caret::bag()
install.packages("cowsay")
library(cowsay)
say("cow")
say("hi! everyone")
detach("package:cowsay", unload=TRUE)
remove.packages("cowsay")
say("hi! everyone")
install.packages("cowsay")
install.packages("/Users/ACS_MacBook/Downloads/cowsay_0.8.0.tar.gz", type="source", repos=NULL)
say("hi! everyone")
.libPaths()
library("/Library/Frameworks/R.framework/Versions/3.6/Resources/library/cowsay")
library(cowsay, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
say("hi! everyone")
.libPaths()
library(caret)
install.packages(cowsay)
install.packages("cowsay")
say("Hi everyone!")
library(cowsay)
say("Hi everyone!")
remove.packages("cowsay")
say("Hi everyone!")
library(cowsay)
say("hi")
install.packages("cowsay")
install.packages("/Users/ACS_MacBook/Downloads/cowsay_0.8.0.tar.gz", type="source", repos=NULL)
library(cowsay, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
say("hi")
detach("package:cowsay", unload=TRUE)
remove.packages("cowsay")
a <- [T, T, F]
a <- c(T, T, F)
b <- c(F, T, T)
a and b
a & b
library(caret)
detach("package:caret", unload=TRUE)
install.packages("cowsay")
library(cowsay)
say("Hi everyone")
remove.packages("cowsay")
install.packages("cowsay")
install.packages("cowsay")
install.packages("cowsay")
install.packages("/Users/ACS_MacBook/Downloads/cowsay_0.8.0.tar.gz", contriburl="file:///path/to/packages/")
install.packages("/Users/ACS_MacBook/Downloads/cowsay_0.8.0.tar.gz", type="source", repos=NULL)
library(cowsay, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
say("Hi everyone")
remove.packages("cowsay")
caret
library(caret)
install.packages("cowsay")
install.packages("cowsay")
library(cowsay)
say("Hi everyone")
remove.packages("cowsay")
say("ss")
say("hi")
install.packages("/Users/ACS_MacBook/Downloads/cowsay_0.8.0.tar.gz", type="source", repos=NULL)
library(cowsay, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
say("hi")
p.adjust(c(0.001, 0.001, 0.018, 0.012, 0.476), method = "p.adjust.methods"BH, n = 5))
p.adjust(c(0.001, 0.001, 0.018, 0.012, 0.476), method = "BH", n = 5))
p.adjust(c(0.001, 0.001, 0.018, 0.012, 0.476), method = "BH", n = 5)
library(tidyverse)
df1 <- read.csv("/Users/ACS_MacBook/GoogleDrive/ResearchProjects/[2019-2020]GBMvsMET/features_mask_set_1.csv")
df2 <- read.csv("/Users/ACS_MacBook/GoogleDrive/ResearchProjects/[2019-2020]GBMvsMET/features_mask_set_2.csv")
View(df1)
View(df2)
library(irr)
length(df1)
for (i in 2:length(df1)){
print(i)
}
print(df1[,i])
colnames(df1)
for (i in 2:length(df1)){
feature_name <- colnames(df1)[i]
print(feature_name)
}
for (i in 2:length(df1)){
feature_name <- colnames(df1)[i]
df1_feature <- select(df1, feature_name)
print(df1_feature)
}
feature_name
select(df1, feature_name)
colnames(df1)[1]
colnames(df1)[2]
colnames(df1)[3]
colnames(df1)[4]
i <- 2
feature_name <- colnames(df1)[i]
df1_feature <- select(df1, feature_name)
print(df1_feature)
i <- 2
feature_name <- colnames(df1)[i]
df1_feature <- select(df1, feature_name)
df2_feature <- select(df2, feature_name)
cbind(df1_feature, df2_feature)
df_ICC <- cbind(df1_feature, df2_feature)
icc(df_ICC, model="twoway", type="agreement")
result <- icc(df_ICC, model="twoway", type="agreement")
result$value
icc_value <- icc(df_ICC, model="twoway", type="agreement")$value
icc_value
c(feature_name, icc_value)
data.frame(feature_name=icc_value)
data.frame(feature_name=feature_name, ICC=icc_value)
for (i in 2:length(df1)){
feature_name <- colnames(df1)[i]
df1_feature <- select(df1, feature_name)
df2_feature <- select(df2, feature_name)
df_ICC <- cbind(df1_feature, df2_feature)
icc_value <- icc(df_ICC, model="twoway", type="agreement")$value
result_row <- data.frame(feature_name=feature_name, ICC=icc_value)
if (i == 2){
result_df <- result_row
} else {
result_df <- rbind(result_df, result_row)
}
}
result_df
result_df <- result_row
library(tidyverse)
library(irr)
df1 <- read.csv("/Users/ACS_MacBook/GoogleDrive/ResearchProjects/[2019-2020]GBMvsMET/features_mask_set_1.csv")
df2 <- read.csv("/Users/ACS_MacBook/GoogleDrive/ResearchProjects/[2019-2020]GBMvsMET/features_mask_set_2.csv")
for (i in 2:length(df1)){
feature_name <- colnames(df1)[i]
df1_feature <- select(df1, feature_name)
df2_feature <- select(df2, feature_name)
df_ICC <- cbind(df1_feature, df2_feature)
icc_value <- icc(df_ICC, model="twoway", type="agreement")$value
result_row <- data.frame(feature_name=feature_name, ICC=icc_value)
if (i == 2){
result_df <- result_row
} else {
result_df <- rbind(result_df, result_row)
}
}
result_df
result_df[,2]
summary(result_df[,2])
result_row <- data.frame(feature_name=feature_name, ICC=icc_value, CI=ci)
for (i in 2:length(df1)){
feature_name <- colnames(df1)[i]
df1_feature <- select(df1, feature_name)
df2_feature <- select(df2, feature_name)
df_ICC <- cbind(df1_feature, df2_feature)
icc_result <- icc(df_ICC, model="twoway", type="agreement")
icc_value <- icc_result$value
ci <- icc_result$conf.level
result_row <- data.frame(feature_name=feature_name, ICC=icc_value, CI=ci)
if (i == 2){
result_df <- result_row
} else {
result_df <- rbind(result_df, result_row)
}
}
summary(result_df[,2])
result_df
result_row <- data.frame(feature_name=feature_name, ICC=icc_value, lower=lbound, upper=ubound)
for (i in 2:length(df1)){
feature_name <- colnames(df1)[i]
df1_feature <- select(df1, feature_name)
df2_feature <- select(df2, feature_name)
df_ICC <- cbind(df1_feature, df2_feature)
icc_result <- icc(df_ICC, model="twoway", type="agreement")
icc_value <- icc_result$value
lbound <- icc_result$lbound
ubound <- icc_result$ubound
result_row <- data.frame(feature_name=feature_name, ICC=icc_value, lower=lbound, upper=ubound)
if (i == 2){
result_df <- result_row
} else {
result_df <- rbind(result_df, result_row)
}
}
result_df
write.csv(result_df, "/Users/ACS_MacBook/GoogleDrive/ResearchProjects/[2019-2020]GBMvsMET/icc_result.csv")
library(tidyverse)
library(irr)
df1 <- read.csv("/Users/ACS_MacBook/GoogleDrive/ResearchProjects/[2019-2020]GBMvsMET/features_mask_set_1.csv")
df2 <- read.csv("/Users/ACS_MacBook/GoogleDrive/ResearchProjects/[2019-2020]GBMvsMET/features_mask_set_2.csv")
for (i in 2:length(df1)){
feature_name <- colnames(df1)[i]
df1_feature <- select(df1, feature_name)
df2_feature <- select(df2, feature_name)
df_ICC <- cbind(df1_feature, df2_feature)
icc_result <- icc(df_ICC, model="twoway", type="agreement")
icc_value <- icc_result$value
lbound <- icc_result$lbound
ubound <- icc_result$ubound
result_row <- data.frame(feature_name=feature_name, ICC=icc_value, lower=lbound, upper=ubound)
if (i == 2){
result_df <- result_row
} else {
result_df <- rbind(result_df, result_row)
}
}
result_df
write.csv(result_df, "/Users/ACS_MacBook/GoogleDrive/ResearchProjects/[2019-2020]GBMvsMET/icc_result.csv")
citation()
license()
library("randomForestSRC", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
?rfsc
??rfsc
library(survival)
library(pec)
library(prodlim)
install.packages("pec")
library(pec)
## data, formula specifications
data(pbc, package = "randomForestSRC")
pbc.na <- na.omit(pbc) ## remove NA's
View(pbc.na)
?Surv
surv.f <- as.formula(Surv(days, status) ~ .)
pec.f <- as.formula(Hist(days, status) ~ 1)
## run cox/rfsrc models
## for illustration we use a small number of trees
cox.obj <- coxph(surv.f, data = pbc.na, x = TRUE)
rfsrc.obj <- rfsrc(surv.f, pbc.na, ntree = 150)
rfsrc.obj
cox.obj
?pec
## compute bootstrap cross-validation estimate of expected Brier score
set.seed(17743)
prederror.pbc <- pec(list(cox.obj,rfsrc.obj), data = pbc.na, formula = pec.f,
splitMethod = "bootcv", B = 50)
print(prederror.pbc)
plot(prederror.pbc)
rfsrc.obj <- rfsrc(surv.f, pbc.na)
cat("out-of-bag Cox Analysis ...", "\n")
cox.err <- sapply(1:100, function(b) {
if (b%%10 == 0) cat("cox bootstrap:", b, "\n")
train <- sample(1:nrow(pbc.na), nrow(pbc.na), replace = TRUE)
cox.obj <- tryCatch({coxph(surv.f, pbc.na[train, ])}, error=function(ex){NULL})
if (!is.null(cox.obj)) {
get.cindex(pbc.na$days[-train], pbc.na$status[-train], predict(cox.obj, pbc.na[-train, ])) } else NA
})
cat("\n\tOOB error rates\n\n")
cat("\tRSF : ", rfsrc.obj$err.rate[rfsrc.obj$ntree], "\n") cat("\tCox regression : ", mean(cox.err, na.rm = TRUE), "\n")
?coxph
?predict
##prediction function required for pec
predictSurvProb.rfsrc <- function(object, newdata, times, ...){
ptemp <- predict(object, newdata=newdata,...)$survival
pos <- sindex(jump.times = object$time.interest, eval.times = times)
p <- cbind(1,ptemp)[, pos + 1]
if (NROW(p) != NROW(newdata) || NCOL(p) != length(times))
stop("Prediction failed")
p
}
rfsrc.obj <- rfsrc(surv.f, pbc.na)
cat("out-of-bag Cox Analysis ...", "\n")
cox.err <- sapply(1:100, function(b) {
if (b%%10 == 0) cat("cox bootstrap:", b, "\n")
train <- sample(1:nrow(pbc.na), nrow(pbc.na), replace = TRUE)
cox.obj <- tryCatch({coxph(surv.f, pbc.na[train, ])}, error=function(ex){NULL})
if (!is.null(cox.obj)) {
get.cindex(pbc.na$days[-train], pbc.na$status[-train], predict(cox.obj, pbc.na[-train, ])) } else NA
})
cat("\n\tOOB error rates\n\n")
cat("\tRSF : ", rfsrc.obj$err.rate[rfsrc.obj$ntree], "\n") cat("\tCox regression : ", mean(cox.err, na.rm = TRUE), "\n")
rfsrc.obj <- rfsrc(surv.f, pbc.na)
cat("out-of-bag Cox Analysis ...", "\n")
cox.err <- sapply(1:100, function(b) {
if (b%%10 == 0) cat("cox bootstrap:", b, "\n")
train <- sample(1:nrow(pbc.na), nrow(pbc.na), replace = TRUE)
cox.obj <- tryCatch({coxph(surv.f, pbc.na[train, ])}, error=function(ex){NULL})
if (!is.null(cox.obj)) {
get.cindex(pbc.na$days[-train], pbc.na$status[-train], predict(cox.obj, pbc.na[-train, ])) } else NA
})
cat("\n\tOOB error rates\n\n")
cat("\tRSF : ", rfsrc.obj$err.rate[rfsrc.obj$ntree], "\n")
cat("\tCox regression : ", mean(cox.err, na.rm = TRUE), "\n")
library(survival)
library(pec)
library(prodlim)
##prediction function required for pec
predictSurvProb.rfsrc <- function(object, newdata, times, ...){
ptemp <- predict(object, newdata=newdata,...)$survival
pos <- sindex(jump.times = object$time.interest, eval.times = times)
p <- cbind(1,ptemp)[, pos + 1]
if (NROW(p) != NROW(newdata) || NCOL(p) != length(times))
stop("Prediction failed")
p
}
## data, formula specifications
data(pbc, package = "randomForestSRC")
pbc.na <- na.omit(pbc) ## remove NA's
surv.f <- as.formula(Surv(days, status) ~ .)
pec.f <- as.formula(Hist(days, status) ~ 1)
## run cox/rfsrc models
## for illustration we use a small number of trees
cox.obj <- coxph(surv.f, data = pbc.na, x = TRUE)
rfsrc.obj <- rfsrc(surv.f, pbc.na, ntree = 150)
cox.obj
summary(cox.obj)
combn
a <- c(1, 2, 3)
b <- c(100, 200, 300)
combn(a)
combn(a, 1)
combn(a, 2)
c <- c(a, b)
c
expand.grid(a, b)
expand.grid(a, b)[1]
expand.grid(a, b)[1, ]
for (c(e, f) in exapnd.grid(a,b)){
print(e)
}
library(tidyverse)
seq(1, 100)
a <- seq(50, 100)
b <- seq(50, 100)
d <- c()
for (i in a){
for (j in b){
d <- c(d, round(i/j*100, 1))
}
}
d
install.packages('devtools') #assuming it is not already installed
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
print
print.aspell
methods(print)
aspell("wrds")
j <- list(name="Chansik", salary=5000, union=T)
j
class(j)
class(j) <- "employee"
attributes(j)
j
print.employee <- function(wrkr){}
print.employee <- function(wrkr){
cat(wrkr$name, "\n")
cat("salary", wrkr$salary, "\n")
cat("union member", wrkr$union, "\n")
}
methods(, "employee")
methods("employee")
j
k <- list(name="Kate", salary=10000, union=F, hrsthismonth=2)
class(k) <- c("hrlyemployee", "employee")
k
k
sum1toi <-function(i) return(i*(i+1)/2)
sum1toi(3
)
shiny::runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
if (1==1)
if 1==1
if(1==1)
{}
if(1==1){}
ifelse(1==1, 1, 0)
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
a <- function(a=1, b=NULL){ifelse(b==NULL, print(1), print(2))}
a(1)
a <- function(a=1, b=NULL){b <- ifelse(b==NULL, 1, 2}
a <- function(a=1, b=NULL){b <- ifelse(b==NULL, 1, 2)
print(b)}
a(1)
a(1,2)
a <- function(a=1, b=NULL){b <- ifelse(is.null(b), 1, 2)
print(b)}
a(1)
a(1, 2)
a
a<-1
case_when(a==1 ~ 0, a==2 ~1)
case_when(a==1 ~ 3, a==2 ~1)
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
a <- NA
is.na(a)
is.na(a) & FALSE
~is.na(a) & FALSE
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
3 + 5 + NA
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
f
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
runApp('GoogleDrive/Current projects/R-Shiny/App-1')
shiny::runApp('GoogleDrive/COVID19withMI/ValPSC-ShinyApp')
runif(4)
library(lobstr)
install.packages("lobstr")
library(lobstr)
a <- c(1,2,3)
obj_addr(a)
b <- a
obj_addr(b)
c <- c(1, 2, 3)
obj_addr(a)
obj_addr(c)
mean
base::mean
get("mean")
evalq(mean)
match.fun("mean")
obj_addr(mean)
obj_addr(base::mean)
obj_addr(get("mean"))
obj_addr(evalq(mean))
obj_addr(match.fun("mean"))
x <- c(1, 2, 3)
cat(tracemem(x), "\n")
y <- x
y[[3]] <- 4L
y[[3]] <- 5L
y[[3]] <- 2L
runApp('GoogleDrive/COVID19withMI/ValPSC-ShinyApp')
runApp('GoogleDrive/COVID19withMI/ValPSC-ShinyApp')
runApp('GoogleDrive/COVID19withMI/ValPSC-ShinyApp')
runApp('GoogleDrive/COVID19withMI/ValPSC-ShinyApp')
runApp('GoogleDrive/COVID19withMI/ValPSC-ShinyApp')
x <- data.frame(matrix(runif(5 * 1e4), ncol = 5))
medians <- vapply(x, median, numeric(1))
for (i in seq_along(medians)) {
x[[i]] <- x[[i]] - medians[[i]]
}
x
medians
numeric(1)
seq_along(medians)
?seq_along
class(seq_along(medians))
x[[1]]
x[1]
x[[1]]
cat(tracemem(x), "\n")
x[[1]]
head(x[[1]])
x[[1]] - 1
head(x[[1]] - 1)
head(x[[1]] - medians[[1]])
a <- x[[1]] - medians[[1]]
x[[1]] <- x[[1]] - medians[[1]]
runApp('GoogleDrive/COVID19withMI/ValPSC-ShinyApp')
runApp('GoogleDrive/COVID19withMI/ValPSC-ShinyApp')
rsconnect::setAccountInfo(name='nhimc', token='10EF19F25006F97A99CA51C7F3B40149', secret='2SHGcqIwuaqyvI/jkOMTFKDuLgQCv6LqkWRqgWdp')
library(rsconnect)
rsconnect::deployApp("~/GoogleDrive/COVID19withMI/IH-PSC")
rsconnect::forgetDeployment("~/GoogleDrive/COVID19withMI/IH-PSC")
rsconnect::setAccountInfo(name='nhimc', token='10EF19F25006F97A99CA51C7F3B40149', secret='2SHGcqIwuaqyvI/jkOMTFKDuLgQCv6LqkWRqgWdp')
rsconnect::deployApp("~/GoogleDrive/COVID19withMI/IH-PSC")
setwd("~/GoogleDrive/SC-MLSG/JBO-GLM")
